{
  // 用户片段文档：https://code.visualstudio.com/docs/editor/userdefinedsnippets

  // 红色警戒示例注释
  "Print to js api": {
    "prefix": "hongsejingjie",
    "body": [
      "/***************************************************************************************************",
      " * AircraftClass :: $0                                                                             *",
      " *                @Description: $0                                                                 *",
      " *                @Description: $0                                                                 *",
      " *                @Description: $0                                                                 *",
      " *                                                                                                 *",
      " * INPUT:$0                                                                                        *",
      " *                                                                                                 *",
      " * OUTPUT:$0                                                                                       *",
      " *                                                                                                 *",
      " * WARNINGS:$0                                                                                     *",
      " * HISTORY:                                                                                        *",
      " *         @MethodAuthor:  HeLihui                                                                 *",
      " *         @Date: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}                 *",
      "*==================================================================================================*/"
    ]
  },

  // ********** console打印片段 **********
  "Print to consoleLog": {
    "prefix": "log",
    "body": ["console.log('$1');", "$2"],
    "description": "console.log快捷键"
  },
  // ********** 页面顶部说明注释片段 **********
  "Print to topNote": {
    "prefix": "topNote",
    "body": [
      "/**",
      " * @Copyright(c) 2022 rights reserved",
      " * @Description: $0",
      " * @Author: your name",
      " * @Date: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      " * @LastEditTime: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_DAY_NAME} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      " * @LastEditors: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_DAY_NAME $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND",
      " */"
    ],
    "description": "页面顶部开头说明注释模板"
  },
  // ********** 方法注释片段 **********
  "Print to method": {
    "prefix": "noteMethod",
    "body": [
      "/**",
      " * @description：$0",
      " * @functionAuthor：$1",
      " * @param：{$2} $3 $4",
      " * @return：{$5} $6",
      " */"
    ],
    "description": "方法注释模板"
  },
  // ********** 方法注释片段(中文) **********
  "Print to methodChinese": {
    "prefix": "noteMethodChinese",
    "body": [
      "/**",
      " * @描述：$0",
      " * @方法作者：$1",
      " * @参数：{$2} $3 $4",
      " * @返回：{$5} $6",
      " */"
    ],
    "description": "方法注释模板中文版"
  },
  // ********** 类注释片段 **********
  "Print to class": {
    "prefix": "noteClass",
    "body": [
      "/**",
      " * @description：$0",
      " * @classAuthor：$1",
      " * @param：{$2} $3 $4",
      " * @return：{$5} $6",
      " */"
    ],
    "description": "类注释模板"
  },
  // ********** 类注释片段(中文) **********
  "Print to classChinese": {
    "prefix": "noteClassChinese",
    "body": [
      "/**",
      " * @描述：$0",
      " * @类作者：$1",
      " * @参数：{$2} $3 $4",
      " * @返回：{$5} $6",
      " */"
    ],
    "description": "类注释模板中文版"
  },

  // ********** 框架提示片段 **********
  "success msg": {
    "prefix": "success",
    "body": [
        "this.\\$message.success($1)",
    ],
    "description": "成功提示"
  },
  "info msg": {
    "prefix": "info",
    "body": [
        "this.\\$message.info($1)",
    ],
    "description": "提示信息"
  },
  "error msg": {
    "prefix": "error",
    "body": [
        "this.\\$message.error('$1')",
    ],
    "description": "错误信息"
  },

  // ********** JS常用代码片段 **********
  // 1.合并参数
  "js1": {
    "prefix": "hbcs",
    "body": [
      "const arrayConcat = (arr, ...args) => arr.concat(...args);",
      "// arrayConcat([1], 2, [3], [[4]]) -> [1,2,3,[4]]",
      "$1"
    ],
    "description": "合并参数"
  },
  // 2.取数组不同项
  "js2": {
    "prefix": "qbtx",
    "body": [
      "const difference = (a, b) => { const s = new Set(b); return a.filter(x => !s.has(x)); };",
      "// difference([1,2,3], [1,2]) -> [3]",
      "$1"
    ],
    "description": "取数组不同项"
  },
  // 3.取数组相同项
  "js3": {
    "prefix": "qtx",
    "body": [
      "const intersection = (a, b) => { const s = new Set(b); return a.filter(x => s.has(x)); };",
      "// intersection([1,2,3], [4,3,2]) -> [2,3]",
      "$1"
    ],
    "description": "取数组相同项"
  },
  // 4.合并数组去重
  "js4": {
    "prefix": "hbqc",
    "body": [
      "const union = (a, b) => Array.from(new Set([...a, ...b]));",
      "// union([1,2,3], [4,3,2]) -> [1,2,3,4]",
      "$1"
    ],
    "description": "合并数组去重"
  },
  // 5.数组取平均值
  "js5": {
    "prefix": "qpjz",
    "body": [
      "const average = arr => arr.reduce((acc, val) => acc + val, 0) / arr.length;",
      "// average([1,2,3]) -> 2",
      "$1"
    ],
    "description": "数组取平均值"
  },

  // 6.过滤掉假值
  "js6": {
    "prefix": "gljz",
    "body": [
      "const compact = (arr) => arr.filter(v => v);",
      "// compact([0, 1, false, 2, '', 3, 'a', 'e'*23, NaN, 's', 34]) -> [ 1, 2, 3, 'a', 's', 34 ]",
      "$1"
    ],
    "description": "过滤掉假值（false, null, 0, '', undefined 和 NaN）"
  },

  // 7.过滤掉数组中重复的值
  "js7": {
    "prefix": "glcfz",
    "body": [
      "const filterNonUnique = arr => arr.filter(i => arr.indexOf(i) === arr.lastIndexOf(i));",
      // filterNonUnique([1,2,2,3,4,4,5]) -> [1,3,5]",
      "$1"
    ],
    "description": "过滤掉数组中重复的值"
  },
  // 8.计算数组中重复值出现的次数
  "js8": {
    "prefix": "jscfz",
    "body": [
      "const countOccurrences = (arr, value) => arr.reduce((a, v) => v === value ? a + 1 : a + 0, 0);",
      "// countOccurrences([1,1,2,1,2,3], 1) -> 3",
      "$1"
    ],
    "description": "计算数组中重复值出现的次数"
  },
  // 9.滚动至顶部
  "scroll to top": {
    "prefix": "gotop",
    "body": [
      "const scrollToTop = _ => {",
      "  const c = document.documentElement.scrollTop || document.body.scrollTop;",
      "  if (c > 0) {",
      "    window.requestAnimationFrame(scrollToTop);",
      "    window.scrollTo(0, c - c / 8);",
      "  }",
      "};",
      "// scrollToTop()"
    ],
    "description": "滚动至顶部"
  },
  // 10.获取两个日期间的差距
  "Get days difference between dates": {
    "prefix": "datecj",
    "body": [
      "const getDaysDiffBetweenDates = (dateInitial, dateFinal) => (dateFinal - dateInitial) / (1000 * 3600 * 24);",
      "// getDaysDiffBetweenDates(new Date('2017-12-13'), new Date('2017-12-22')) -> 9",
      "$1"
    ],
    "description": "获取两个日期间的差距"
  },
  // 11.指定范围内的随机整数
  "Random integer in range": {
    "prefix": "sjzs",
    "body": [
      "const randomIntegerInRange = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;",
      "// randomIntegerInRange(0, 5) -> 2",
      "$1"
    ],
    "description": "指定范围内的随机整数"
  },
  // 12.URL参数
  "URL parameters": {
    "prefix": "urlcs",
    "body": [
      "const getUrlParameters = url =>",
      "  url.match(/([^?=&]+)(=([^&]*))/g).reduce(",
      "    (a, v) => (a[v.slice(0, v.indexOf('='))] = v.slice(v.indexOf('=') + 1), a), {}",
      ");",
      "// getUrlParameters('http://url.com/page?name=Adam&surname=Smith') -> {name: 'Adam', surname: 'Smith'}",
      "$1"
    ],
    "description": "URL参数"
  }
}
